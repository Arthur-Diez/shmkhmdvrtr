from fastapi import FastAPI, Request
import logging
import requests
import os
import re

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω Telegram
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

# Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç YooKassa
@app.post("/webhook/yookassa")
async def webhook_yookassa(request: Request):
    try:
        data = await request.json()
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç YooKassa: {data}")

        event = data.get("event")
        payment_info = data.get("object", {})
        chat_id = payment_info.get("metadata", {}).get("chat_id")
        product_id = payment_info.get("metadata", {}).get("product_id")

        if event == "payment.succeeded":
            if chat_id and product_id:
                send_telegram_message(chat_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n*–¢–æ–≤–∞—Ä:* {product_id}")
        elif event == "payment.canceled":
            if chat_id:
                send_telegram_message(chat_id, f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        elif event == "refund.succeeded":
            if chat_id:
                send_telegram_message(chat_id, f"üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")

        return {"status": "ok"}
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error"}

# –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
@app.get("/")
async def root():
    return {"message": "‚úÖ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram-–±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."}

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@app.post("/success")
async def payment_success():
    logging.info("üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
    return {"message": "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram-–±–æ—Ç."}

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è favicon.ico
@app.get("/favicon.ico")
async def favicon():
    return {"message": "Favicon –∑–∞–ø—Ä–æ—à–µ–Ω. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º."}

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –≤ Telegram Markdown
def escape_markdown(text):
    escape_chars = r'\*_`[]()~>#+-=|{}.!'
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(chat_id, text):
    try:
        payload = {
            "chat_id": chat_id,
            "text": escape_markdown(text),  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º Markdown
            "parse_mode": "MarkdownV2"
        }
        response = requests.post(TELEGRAM_API_URL, json=payload)
        if response.status_code == 200:
            logging.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {response.text}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {e}")

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=port)