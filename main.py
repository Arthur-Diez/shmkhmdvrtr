from fastapi import FastAPI, Request
import logging
import requests
import os
import psycopg2
from psycopg2.extras import RealDictCursor
import re

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

BOT_SERVER_URL = "http://147.45.167.44:8000"

# –¢–æ–∫–µ–Ω Telegram
TELEGRAM_BOT_TOKEN_TAROT_RUS = os.getenv("TELEGRAM_BOT_TOKEN_TAROT_RUS", "–í–ê–®_–¢–û–ö–ï–ù_–¢–ê–†–û_–†–£–°")
TELEGRAM_BOT_TOKEN_SONNIK_RUS = os.getenv("TELEGRAM_BOT_TOKEN_SONNIK_RUS", "–í–ê–®_–¢–û–ö–ï–ù_–°–û–ù–ù–ò–ö_–†–£–°")
TELEGRAM_BOT_TOKEN_RESHALA = os.getenv("TELEGRAM_BOT_TOKEN_RESHALA", "–í–ê–®_–¢–û–ö–ï–ù_–†–ï–®–ê–õ–ê")
TELEGRAM_API_URL_TAROT_RUS = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN_TAROT_RUS}/sendMessage"
TELEGRAM_API_URL_SONNIK_RUS = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN_SONNIK_RUS}/sendMessage"
TELEGRAM_API_URL_RESHALA = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN_RESHALA}/sendMessage"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    "dbname": os.getenv("DB_NAME", "default_db"),
    "user": os.getenv("DB_USER", "gen_user"),
    "password": os.getenv("DB_PASSWORD", "({Ga:8\\5YFVa9u"),
    "host": os.getenv("DB_HOST", "212.193.26.202"),
    "port": os.getenv("DB_PORT", 5432)
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
PRODUCT_NAMES_TAROT_RUS = {
    "cards_3": "3 –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ä—Ç–∞–º",
    "cards_5": "5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞—Ä—Ç–∞–º",
    "cards_10": "10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞—Ä—Ç–∞–º",
    "cards_30": "30 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞—Ä—Ç–∞–º",
    "cards_7d": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—ã (7 –¥–Ω–µ–π)",
    "cards_30d": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—ã (30 –¥–Ω–µ–π)",
    "matrix_1": "1 –∑–∞–ø—Ä–æ—Å –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã",
    "matrix_5": "5 –∑–∞–ø—Ä–æ—Å–æ–≤ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã",
    "matrix_10": "10 –∑–∞–ø—Ä–æ—Å–æ–≤ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã",
    "horoscope_sub_7": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø 7 –¥–Ω–µ–π",
    "horoscope_sub_14": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø 14 –¥–Ω–µ–π",
    "horoscope_sub_30": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø 30 –¥–Ω–µ–π",
    "horoscope_tomorrow": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
    "horoscope_week": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é",
    "horoscope_month": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü",
    "horoscope_year": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –≥–æ–¥"
}

PRODUCT_NAMES_SONNIK_RUS = {
    "sonnik_1": "1 —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–Ω–∞",
    "sonnik_3": "3 —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤",
    "sonnik_5": "5 —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π —Å–Ω–æ–≤",
    "sonnik_month": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π"
}

# –ù–∞–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø
HOROSCOPE_PRODUCTS = {
    "horoscope_sub_7",
    "horoscope_sub_14",
    "horoscope_sub_30"
}

PRODUCT_NAMES_RESHALA = {
    "reshala_10": "10 –≤–æ–ø—Ä–æ—Å–æ–≤",
    "reshala_20": "20 –≤–æ–ø—Ä–æ—Å–æ–≤",
    "reshala_50": "50 –≤–æ–ø—Ä–æ—Å–æ–≤",
    "reshala_100": "100 –≤–æ–ø—Ä–æ—Å–æ–≤"
}

# =========================================
# –°–õ–û–í–ê–†–ò –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤ –ë–î
# (–¢—É—Ç —É–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –≤ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–∏–±–∞–≤–ª—è—Ç—å)
PRODUCT_UPDATES_TAROT_RUS = {
    "cards_3":       {"field": "request_questions", "value": 3},
    "cards_5":      {"field": "request_questions", "value": 5},
    "cards_10":      {"field": "request_questions", "value": 10},
    "cards_30":      {"field": "request_questions", "value": 30},
    "cards_7d":      {"field": "premium_days_left", "value": 7},
    "cards_30d":     {"field": "premium_days_left", "value": 30},
    "matrix_1":      {"field": "request_matrix", "value": 1},
    "matrix_5":      {"field": "request_matrix", "value": 5},
    "matrix_10":     {"field": "request_matrix", "value": 10},
    "horoscope_sub_7":  {"field": "days_for_horoscope", "value": 7},
    "horoscope_sub_14": {"field": "days_for_horoscope", "value": 14},
    "horoscope_sub_30": {"field": "days_for_horoscope", "value": 30},
    "horoscope_tomorrow": {"field": "day_horoscope", "value": 1},
    "horoscope_week":     {"field": "week_horoscope", "value": 1},
    "horoscope_month":    {"field": "month_horoscope", "value": 1},
    "horoscope_year":     {"field": "year_horoscope", "value": 1}
}

PRODUCT_UPDATES_SONNIK_RUS = {
    "sonnik_1":     {"field": "dream_requests",       "value": 1},
    "sonnik_3":     {"field": "dream_requests",       "value": 3},
    "sonnik_5":     {"field": "dream_requests",       "value": 5},
    "sonnik_month": {"field": "premium_days_sonnik",  "value": 30}  # –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 30 –¥–Ω–µ–π
}

PRODUCT_UPDATES_RESHALA = {
    "reshala_10":     {"field": "questions_count",       "value": 10},
    "reshala_20":     {"field": "questions_count",       "value": 20},
    "reshala_50":     {"field": "questions_count",       "value": 50},
    "reshala_100":    {"field": "questions_count",       "value": 100}  # –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 30 –¥–Ω–µ–π
}
# =========================================


# Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç YooKassa
@app.post("/webhook/yookassa")
async def webhook_yookassa(request: Request):
    try:
        data = await request.json()
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç YooKassa: {data}")

        event = data.get("event")
        payment_info = data.get("object", {})
        metadata = payment_info.get("metadata", {}) # –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –±–æ—Ç–æ–≤
        bot_type = metadata.get("bot_type")
        chat_id = payment_info.get("metadata", {}).get("chat_id")
        product_id = payment_info.get("metadata", {}).get("product_id")
        amount = payment_info.get("amount", {}).get("value")  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞

        if event == "payment.succeeded":
            if chat_id and product_id and bot_type:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                success = update_user_data(bot_type, chat_id, product_id)
                if success:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    record_sale(bot_type, chat_id, product_id, amount)
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–∫—Ä–∞—Å–∏–≤–æ–µ" –∏–º—è —Ç–æ–≤–∞—Ä–∞, –∏—Å—Ö–æ–¥—è –∏–∑ bot_type
                    if bot_type == "tarot_rus":
                        product_name = PRODUCT_NAMES_TAROT_RUS.get(product_id, product_id)
                    elif bot_type == "sonnik_rus":
                        product_name = PRODUCT_NAMES_SONNIK_RUS.get(product_id, product_id)
                    elif bot_type == "reshalbich":
                        product_name = PRODUCT_NAMES_RESHALA.get(product_id, product_id)
                    else:
                        product_name = PRODUCT_NAMES_SONNIK_RUS.get(product_id, product_id)
                    send_telegram_message(bot_type, chat_id, escape_markdown(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–¢–æ–≤–∞—Ä: '{product_name}' –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç."))
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç –¢–∞—Ä–æ –∏ —Ç–æ–≤–∞—Ä –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ HOROSCOPE_PRODUCTS, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
                    if bot_type == "tarot_rus" and product_id in HOROSCOPE_PRODUCTS:
                        call_bot_for_horoscope(chat_id)
                else:
                    send_telegram_message(bot_type, chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        elif event == "payment.canceled":
            if chat_id and bot_type:
                send_telegram_message(bot_type, chat_id, "‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        elif event == "refund.succeeded":
            if chat_id and bot_type:
                send_telegram_message(bot_type, chat_id, "üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")

        return {"status": "ok"}
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error"}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_user_data(bot_type: str, chat_id: int, product_id: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ, –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–æ–≥–æ, –∫ –∫–∞–∫–æ–º—É –±–æ—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–æ–∫—É–ø–∫–∞
    –∏ –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–æ–≤–∞—Ä –±—ã–ª –∫—É–ø–ª–µ–Ω.
    """
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏:
        if bot_type == "tarot_rus":
            product_dict = PRODUCT_UPDATES_TAROT_RUS
            table_name = "users"  # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –±–æ—Ç–∞ "–¢–∞—Ä–æ"
        elif bot_type == "sonnik_rus":
            product_dict = PRODUCT_UPDATES_SONNIK_RUS
            table_name = "users_sonnik"  # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –±–æ—Ç–∞ "–°–æ–Ω–Ω–∏–∫"
        elif bot_type == "reshalbich":
            product_dict = PRODUCT_UPDATES_RESHALA
            table_name = "users_resh"
            user_field = "user_id_resh"
        else:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π bot_type: {bot_type}")
            return False

        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ
        if product_id not in product_dict:
            logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: {product_id}")
            return False

        # –î–æ—Å—Ç–∞—ë–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –Ω–∞–¥–æ —É–≤–µ–ª–∏—á–∏—Ç—å
        update_info = product_dict[product_id]
        field = update_info["field"]
        value = update_info["value"]

        query = f"""
            UPDATE {table_name}
            SET {field} = {field} + %s
            WHERE {user_field if bot_type == 'reshalbich' else ('user_id_son' if bot_type == 'sonnik_rus' else 'user_id')} = %s
        """

        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute(query, (value, chat_id))
                conn.commit()

        logging.info(
            f"‚úÖ [{bot_type.upper()}] –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ '{field}' –Ω–∞ +{value} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}"
        )
        return True

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

# –ó–∞–ø–∏—Å—å –ø–æ–∫—É–ø–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É sales
def record_sale(bot_type: str, chat_id: int, product_id: str, amount: str):
    """
    –ó–∞–ø–∏—Å—å —Ñ–∞–∫—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É sales. –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å bot_type –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º.
    """
    try:
        # –í—ã–±–∏—Ä–∞–µ–º "–∫—Ä–∞—Å–∏–≤–æ–µ" –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if bot_type == "tarot_rus":
            product_name = PRODUCT_NAMES_TAROT_RUS.get(product_id, product_id)
        elif bot_type == "sonnik_rus":
            product_name = PRODUCT_NAMES_SONNIK_RUS.get(product_id, product_id)
        elif bot_type == "reshalbich":
            product_name = PRODUCT_NAMES_RESHALA.get(product_id, product_id)
        else:
            product_name = PRODUCT_NAMES_SONNIK_RUS.get(product_id, product_id)

        query = """
            INSERT INTO sales (user_id, product_name, amount, bot_type) 
            VALUES (%s, %s, %s, %s);
        """

        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute(query, (chat_id, product_name, amount, bot_type))
                conn.commit()

        logging.info(f"‚úÖ [{bot_type.upper()}] –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∫—É–ø–∏–ª '{product_name}' –∑–∞ {amount} —Ä—É–±.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥–∞–∂: {e}")

# –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –≤ MarkdownV2
def escape_markdown(text):
    escape_chars = r'\_*[]()~`>#+-=|{}'
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(bot_type: str, chat_id: int, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω/URL.
    """
    if bot_type == "tarot_rus":
        url = TELEGRAM_API_URL_TAROT_RUS
    elif bot_type == "sonnik_rus":
        url = TELEGRAM_API_URL_SONNIK_RUS
    elif bot_type == "reshalbich":
        url = TELEGRAM_API_URL_RESHALA
    else:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π bot_type –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {bot_type}")
        return

    try:
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "Markdown"
        }
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            logging.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –≤ –±–æ—Ç–∞ '{bot_type}'")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def call_bot_for_horoscope(user_id: int):
    """
    –î–µ–ª–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –±–æ—Ç–∞, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å 
    –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è user_id –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ Telegram.
    """
    try:
        # –ï—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ –±–æ—Ç–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è /internal/activate_horoscope
        endpoint = f"{BOT_SERVER_URL}/internal/activate_horoscope"
        data = {"user_id": user_id}
        resp = requests.post(endpoint, json=data, timeout=30)
        if resp.status_code == 200:
            logging.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É –¥–ª—è user_id={user_id}.")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–æ—Ç—É: {resp.status_code}, {resp.text}")
    except Exception as e:
        logging.error(f"‚ùå call_bot_for_horoscope –æ—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=port)